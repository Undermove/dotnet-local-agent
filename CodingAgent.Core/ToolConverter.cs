using System.Text.Json;
using OpenAI.Chat;

namespace CodingAgent.Core;

public static class ToolConverter
{
    public static List<ChatTool> ConvertToOpenAITools(List<ToolDefinition> tools, bool verbose = false)
    {
        var openAITools = new List<ChatTool>();
        
        if (verbose)
        {
            Console.WriteLine($"üîÑ ToolConverter - Converting {tools.Count} tools to OpenAI format");
        }
        
        foreach (var tool in tools)
        {
            try
            {
                // –°–æ–∑–¥–∞—ë–º ChatTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                var parameters = BinaryData.FromString(JsonSerializer.Serialize(tool.InputSchema));
                var chatTool = ChatTool.CreateFunctionTool(tool.Name, tool.Description, parameters);
                openAITools.Add(chatTool);
                
                if (verbose)
                {
                    Console.WriteLine($"‚úÖ ToolConverter - Converted tool: '{tool.Name}'");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è Warning: Failed to convert tool '{tool.Name}': {ex.Message}");
                // –°–æ–∑–¥–∞—ë–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                var simpleTool = ChatTool.CreateFunctionTool(tool.Name, tool.Description);
                openAITools.Add(simpleTool);
                
                if (verbose)
                {
                    Console.WriteLine($"   Fallback: Created simplified tool '{tool.Name}'");
                }
            }
        }
        
        if (verbose)
        {
            Console.WriteLine($"üîÑ ToolConverter - Total tools ready: {openAITools.Count}");
        }
        
        return openAITools;
    }
}